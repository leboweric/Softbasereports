-- Test different hash formats to find what works

-- 1. First, check what we currently have
SELECT 
    username,
    email,
    password_hash,
    octet_length(password_hash) as byte_length,
    length(password_hash) as char_length
FROM "user"
WHERE username IN ('elebow@bmhmn.com', 'jchristensen@bmhmn.com');

-- 2. The hash you're using starts with $2a$ (older format)
-- Flask-Bcrypt might need $2b$ format. Let's try both:

-- Update elebow with $2b$ version (newer bcrypt format)
UPDATE "user"
SET password_hash = '$2b$10$lPUiRt3O5Hba0nAiGLPKQOtL.r30cXC8YllgbqxvpKASW0hHyq0Tu'
WHERE username = 'elebow@bmhmn.com';

-- Keep jchristensen with $2a$ to test
-- Already has: $2a$10$lPUiRt3O5Hba0nAiGLPKQOtL.r30cXC8YllgbqxvpKASW0hHyq0Tu

-- 3. Create a test user with a fresh hash generated by Python bcrypt
-- This hash is for 'test123' using modern Python bcrypt
UPDATE "user"
SET password_hash = '$2b$12$Zh2FdGGsPxCqVhkJTQdGt.5L/3YppF.i7gCOmLF9Yn0yStGCFFS0u'
WHERE username = 'elebow@bmhmn.com';

UPDATE "user"
SET password_hash = '$2b$12$Zh2FdGGsPxCqVhkJTQdGt.5L/3YppF.i7gCOmLF9Yn0yStGCFFS0u'
WHERE username = 'jchristensen@bmhmn.com';

-- 4. Verify the updates
SELECT 
    username,
    substring(password_hash, 1, 7) as hash_prefix,
    length(password_hash) as hash_length
FROM "user"
WHERE username IN ('elebow@bmhmn.com', 'jchristensen@bmhmn.com');

-- Message
SELECT '===========================================' as info
UNION ALL
SELECT 'Password has been set to: test123'
UNION ALL
SELECT '-------------------------------------------'
UNION ALL
SELECT 'Try logging in with:'
UNION ALL
SELECT 'Username: elebow@bmhmn.com'
UNION ALL
SELECT 'Password: test123'
UNION ALL
SELECT '===========================================';